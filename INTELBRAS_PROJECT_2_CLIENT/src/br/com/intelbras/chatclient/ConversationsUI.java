package br.com.intelbras.chatclient;


import java.util.HashMap;
import java.util.List;
import java.util.Map;

import br.com.intelbras.chat.client.ContatoServiceClient;
import br.com.intelbras.chat.model.Contato;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Label;

public class ConversationsUI extends CustomComponent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	
	@AutoGenerated
	private GridLayout mainLayout;


	private ContatoServiceClient service;


	private UsersUI usersUI;


	private ChatClientUI parent;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 * @param service 
	 * @param users 
	 */
	public ConversationsUI(ContatoServiceClient service, UsersUI usersUI, ChatClientUI parent) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		this.service = service;
		this.usersUI = usersUI;
		this.parent = parent;
		
		updateConversations();

	}
	
	public void updateConversations() {
		mainLayout.removeAllComponents();
		if(parent.usuarioLogado != null){
			List<Contato> list = this.service.getContatosOpen(parent.usuarioLogado.getCodigo());
			Map<Integer, TalkUI> mapTalks = new HashMap<>();
			for (Contato contato : list) {
				TalkUI talk = new TalkUI(contato, service, this.parent);
				mapTalks.put(contato.getCodigo(), talk);
				mainLayout.addComponent(talk);
			}
		}
	}

	@AutoGenerated
	private void buildMainLayout() {
		mainLayout = new GridLayout();
		mainLayout.setColumns(2);
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
	}
}
