package br.com.intelbras.chatclient;

import java.util.List;

import br.com.intelbras.chat.model.Contato;
import br.com.intelbras.chat.model.TalkText;
import br.com.intelbras.chat.service.ContatoService;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class TalkUI extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;
	
	Contato contato;

	private Panel panel;

	private VerticalLayout content;

	private TextArea talkText;

	private TextField input;

	private Button buttonEnviar;

	private ContatoService service;

	private ChatClientUI parent;

	private Integer cod1;

	private Integer cod2;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 * @param parent 
	 */
	public TalkUI(Contato contato, ContatoService service, ChatClientUI parent) {
		this.contato = contato;
		this.service = service;
		this.parent = parent;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		this.cod1 = TalkUI.this.parent.usuarioLogado.getCodigo();
		this.cod2 = TalkUI.this.contato.getCodigo();

		panel = new Panel(contato.getNome());
		panel.setSizeFull();
		panel.setHeight("250");
		
		content = contentVerticalLayout();
		
		panel.setContent(content);
		
		mainLayout.addComponent(panel);
		
		this.updateTalks();
	}

	private void updateTalks() {
		List<TalkText> list = this.service.getTalks(cod1, cod2);
		
		StringBuffer buffer = new StringBuffer();
		
		for (TalkText talkText : list) {
			String nome = "";
			if(talkText.getCod1().equals(cod1)){
				nome = "Eu";
			} else {
				nome = contato.getApelido();
			}
			
			buffer.append("["+nome+" ] :"+talkText.getComent()+"\n");
			
		}
		
		talkText.setValue(buffer.toString());
		
	}

	private VerticalLayout contentVerticalLayout() {
		
		content = new VerticalLayout();
		content.setWidth("100%");
		content.setMargin(true);
		{
			talkText = new TextArea();
			talkText.setWidth("100%");
			talkText.setMaxLength(1000);
			talkText.setEnabled(false);
			content.addComponent(talkText);
		}
		
		{
			HorizontalLayout horizontalLayout = new HorizontalLayout();
			horizontalLayout.setWidth("100%");
			
			input = new TextField();
			input.setMaxLength(100);
			input.setDescription("Escreva sua msg...");
			horizontalLayout.addComponent(input);
			
			buttonEnviar = new Button("Enviar");
			buttonEnviar.addClickListener(new ClickListener() {
				@Override
				public void buttonClick(ClickEvent event) {
					TalkUI.this.service.addTalk(cod1, cod2, TalkUI.this.input.getValue());
					TalkUI.this.updateTalks();
					TalkUI.this.input.setValue("");
				}
			});
			horizontalLayout.addComponent(buttonEnviar);
			
			content.addComponent(horizontalLayout);
		}
		return content;
	}

	@AutoGenerated
	private void buildMainLayout() {
		mainLayout = new VerticalLayout();
		mainLayout.setSizeFull();
	}

}
